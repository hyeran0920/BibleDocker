name: CI/CD Workflow for SpringGitExample

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      # 1. 프로젝트 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정 및 Maven 빌드
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build project with Maven
        run: mvn clean package

      # 3. 기존 Docker 컨테이너 중지 및 삭제
      - name: Stop and remove old container
        run: |
          containerName="${{secrets.DOCKER_CONTAINER_NAME}}"
          existingContainer=$(docker ps -a --filter "name=$containerName" --format "{{.Names}}")
          if [ "$existingContainer" = "$containerName" ]; then
            echo "Stopping container: $containerName"
            docker stop "$containerName"
            docker rm "$containerName"
          else
            echo "No container named $containerName found."
          fi

      # 4. 기존 Docker 이미지 삭제
      - name: Remove old Docker image
        run: |
          imageName="${{ secrets.DOCKER_IMAGE_NAME }}"
          echo "Attempting to remove image: $imageName"
          docker rmi -f "$imageName" || echo "Failed to remove image: $imageName"

      # 5. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .

      # 6. 새 Docker 컨테이너 실행
      - name: Run new Docker container
        run: |
          docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }} -p 8080:8080 ${{ secrets.DOCKER_IMAGE_NAME }}

      # 7. 컨테이너 상태 확인
      - name: Check running containers
        run: docker ps
